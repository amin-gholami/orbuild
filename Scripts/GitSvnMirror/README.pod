
This is the source file from which the README file is generated.

This file is written in Perl's Plain Old Documentation (POD) format.
Run the following Perl commands to convert it to text or to HTML
for easy reading:

  podchecker README.pod  # Optional, check syntax.
  pod2text README.pod >README.txt

  # pod2html seems buggy, at least in perl v5.10.1, therefore
  # I'm using this long one-liner instead (with bash):
  perl -MPod::Simple::HTML  -e "\$p = Pod::Simple::HTML->new; \$p->index( 1 ); \$p->output_fh( *STDOUT{IO} ); \$p->force_title('GitSvnMirror'); \$p->parse_file('README.pod');"  >README.html

This file is best edited with emacs module pod-mode, available in CPAN.
However, the POD syntax is quite simple and can be edited with a standard text editor.

=pod

=head1 I<< GitSvnMirror >> - a git mirror of the OpenRISC Subversion repositories

Please see the HTML template file in this directory, or look at an HTML report generated with it,
for an overview of this toolset, which is part of the I<< orbuild >> project.

=head1 How to add a new repository

=over

=item * Manually clone the subversion repository

Examples:
  cd orbuild/GitSvnMirrors/Repositories

  git svn init http://opencores.org/ocsvn/openrisc/openrisc/trunk/<project name>
    or
  git svn init http://opencores.org/ocsvn/minsoc/minsoc/trunk/ minsoc

  TODO: The Apache Foundation performs the following extra steps here:
  git config gitweb.owner "The Apache Software Foundation"
  echo "git://git.apache.org/$GIT_DIR" > "$GIT_DIR/cloneurl"
  echo "http://git.apache.org/$GIT_DIR" >> "$GIT_DIR/cloneurl"
  echo "$DESCRIPTION" > "$GIT_DIR/description"
  touch "$GIT_DIR/git-daemon-export-ok"
  # Normally you get "ref: refs/heads/master" in the .git/HEAD file"
  echo "ref: refs/heads/trunk" > "$GIT_DIR/HEAD"
  git update-server-info

=item * Manuall fetch the new repository

  git svn fetch --username=<login> --log-window-size=10000

You'll have the chance to enter the password, see section "About the Subversion credentials"
below for more information.

Note that, although "git svn init" does recognise option "--username=<login>",
it does not seem to store it properly, at least for git version 1.7.0.4.

=item * Create file .git/OrbuildGitSvnInit

Write in that file the "git svn init" command you created the repository with,
so that other users can use the same parameters when further cloning the git repository.

=item * Create or edit file .git/description

The generated HTML mirror status report shows next to each repository the contents of this description file.

=item * Update the Makefile to include the new repository

=item * Update the repositories every now and then

Script UpdateAllMirrors.sh is normally scheduled to run every day on the server,
so that all repositories get updated regularly.

The update procedure issues a "git svn rebase" every time, so the git repositories
should be considered read-only and should not be used for manual development.

The daily script assumes that the connection to the Subversion server is not
reliable and will retry a few times before giving up.

=back

=head2 About branches and tags

Project or1ksim has tags in the subversion repository, but not branches.
I have not been able to import the tags into git. I have tried all thinkable combinations,
but as soon as I specify the -t option to "git svn init", the fetch operation downloads nothing at all.
Any help with this will be appreciated.

=head2 About the Subversion credentials

The first time a "git svn fetch" is performed, Subversion will ask for the password and cache the credentials.
Caching the credentials is necessary because, although 'git svn' does
understand Subversion's option '--username',
it does not understand Subversion's option '--password'.

If you ever need to change the cached username or password for that repository,
you'll have to manually do this on the git repository:

git svn fetch --username=<login>

You'll then be asked for the password, and the new credentials will be cached.

I thought running the following command would refresh the credentials globally,
but that does not seem to be the case.

(does not work) svn log -rHEAD --username <login> svn://example.com/svn-repo

You may be able to automate your credentials in some other way, for example,
with SSH keys. Or you may not need any authentication at all.

=head2 Cloning the git repositories

If you wish to further clone or push the git repository, keep in mind that
the Subversion information is not automatically cloned.

Alternatives to overcome this issue are:

=over

=item * Clone the git repository with rsync.

=item * Initialise the destination repository with the same "git svn init" parameters.

It is possible to do that on an existing clone, search the Internet for
"Rebuilding git-svn metadata" for details.

=item * Clone as usual and do nothing else.

The other cloned git repositories will carry no links to the orignal subversion repository,
but that's not a problem if you only intend to develop on a patch basis.

=back

=head1 License

Copyright (C) R. Diez 2011

The I<< GitSvnMirror >> source code is released under the GPL 3 license.

This document is released under the Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0) license.

=cut
