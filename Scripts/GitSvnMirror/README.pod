
This is the source file from which the README file is generated.

This file is written in Perl's Plain Old Documentation (POD) format.
Run the following Perl commands to convert it to text or to HTML
for easy reading:

  podchecker README.pod  # Optional, check syntax.
  pod2text README.pod >README.txt

  # pod2html seems buggy, at least in perl v5.10.1, therefore
  # I'm using this long one-liner instead (with bash):
  perl -MPod::Simple::HTML  -e "\$p = Pod::Simple::HTML->new; \$p->index( 1 ); \$p->output_fh( *STDOUT{IO} ); \$p->force_title('GitSvnMirror'); \$p->parse_file('README.pod');"  >README.html

This file is best edited with emacs module pod-mode, available in CPAN.
However, the POD syntax is quite simple and can be edited with a standard text editor.

=pod

=head1 I<< GitSvnMirror >> - a git mirror of the OpenRISC Subversion repositories

GitSvnMirror is a set of tools to create and maintain a collection of read-only Git mirrors
of OpenRISC Subversion repositories.
The scripts are designed to run on a public server, but they can also be run locally
to create a personal mirror collection.

This project was inspired by a similar mirror collection at L<< http://git.apache.org/ >>,
whose source code is available at L<< https://svn.apache.org/repos/infra/infrastructure/trunk/projects/git/ >>.

=head1 Getting started

First of all, you need to decide whether you need the whole revision history, as
it can take hours to download all of it from the Subversion repositories. If you do need it,
edit the file 'Makefile' and modify variable 'FIRST_GIT_SVN_FETCH_ARGS' near the top accordingly.

To start the mirroring process, run the I<< UpdateAllMirrors.sh >> script from a Linux or Cygwin command line.
A default set of OpenRISC repositories will be mirrored.
The update process assumes that the connection
to the Subversion server is not reliable and will retry a few times before giving up.

The first time you will have to manually enter your Subversion login and password.
If the wrong username is displayed, leave the password blank and you should be able
to enter another username on the next prompt. Your local Subversion client
will cache this authentication information for subsequent runs,
see section "About the Subversion credentials" below for more information. Afterwards, you can automate
the process by scheduling the script to run at regular intervals.

If you use the mirrored repositories for local development, keep in mind
that the update procedure performs a "git svn rebase" every time, which may not be
what you want if you have uncommitted changes in your sandbox.

If you run the script on a web server, use environment variable ORBUILD_GIT_URL_PREFIX
in order to generate correct git clone URLs. For example:
export ORBUILD_GIT_URL_PREFIX="git://myserver.com/GitSvnMirrors/"

Please see the HTML template file in this directory, or look at the generated HTML report,
for more information.

=head1 How to add a new repository

=over

=item * Edit the Makefile

Just copy, paste and modify one of the existing entries.

=item * Start the update process at least once from an interactive console

This is so that you can enter your Subversion login and password, if necessary.

Afterwards, no further interaction should be necessary, therefore you can
continue to run the script in an automated fashion.

If you make a mistake and the repository was not downloaded as expected,
delete the directory where the mirrored repository lives and it will be recreated
the next time around.

=back

=head1 Subversion branches and tags are not mirrored

At the moment, only the Subversion I<< trunk >> is tracked by the git mirrors.

The OpenRISC project or1ksim has tags in its subversion repository, but not branches.
However, I have not been able to import the tags into git. I have tried all thinkable combinations,
but as soon as I specify the -t option to "git svn init", the fetch operation does not download anything at all.
This problem probably exists with other OpenRISC repositories. Any help will be appreciated.

=head1 About the Subversion credentials

The first time a "git svn fetch" is performed, Subversion will ask for the password and cache the credentials.
Caching the credentials is necessary because, although 'git svn' does
understand Subversion's option '--username',
it does not understand Subversion's option '--password'.

If you ever need to change the cached username or password for that repository,
you'll have to manually run this command on the git repository:

git svn fetch --username=<login>

You'll then be asked for the password, and the new credentials will be cached.

I thought running the following command would refresh the credentials globally,
but that does not seem to be the case.

(does not work) svn log -rHEAD --username <login> svn://example.com/svn-repo

You may be able to automate your credentials in some other way, for example,
with SSH keys. Or you may not need any authentication at all.

=head1 Cloning the git mirror repositories

If you wish to further clone or push the git repository, keep in mind that
the Subversion information is not automatically cloned.

Alternatives to overcome this issue are:

=over

=item * Clone the git repository with rsync.

=item * Initialise the destination repository with the same "git svn init" parameters.

That is the reason why the report page includes the I<< git svn >> command used to create the mirrored repository.

It is possible to initialise the Subversion information on an existing clone, search the Internet for
"Rebuilding git-svn metadata" for details.

=item * Clone as usual and do nothing else.

The other cloned git repositories will carry no links to the orignal subversion repository,
but that's not a problem if you only intend to contribute your changes
on a patch basis.

=back

=head1 License

Copyright (C) R. Diez 2011

The I<< GitSvnMirror >> source code is part of the I<< orbuild >> project and is released under the GPL 3 license.

This document is released under the Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0) license.

=cut
