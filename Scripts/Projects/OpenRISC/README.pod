
This is the source file from which the README file is generated.

This file is written in Perl's Plain Old Documentation (POD) format.
Run the following Perl commands to convert it to text or to HTML
for easy reading:

  podchecker README.pod  # Optional, check syntax.
  pod2text README.pod >README.txt

  # pod2html seems buggy, at least in perl v5.10.1, therefore
  # I'm using this long one-liner instead (with bash):
  perl -MPod::Simple::HTML  -e "\$p = Pod::Simple::HTML->new; \$p->index( 1 ); \$p->output_fh( *STDOUT{IO} ); \$p->force_title('orbuild OpenRISC project'); \$p->parse_file('README.pod');"  >README.html

This file is best edited with emacs module pod-mode, available in CPAN.
However, the POD syntax is quite simple and can be edited with a standard text editor.

=pod

=head1 OpenRISC build project

This is an I<< orbuild project >>, see the main I<< orbuild system >> documentation on how to run it.

=head2 Prerequisites

=head3 Ubuntu/Debian Linux

Under Ubuntu/Debian systems, the following command installs all prerequisites at once:

  sudo apt-get install  gcc g++ libmpfr-dev libgmp3-dev libmpc-dev libzip-dev libtool texlive flex bison texinfo libncurses-dev gperf
  sudo apt-get install  dejagnu verilator iverilog tcl-dev tk-dev autogen

If your system does not have a package with Verilator or Icarus Verilog, you can enable building them in the Makefile, see below.

=head3 Cygwin

Some of the required package names are:

  tetex
  libgmp-devel
  libmpfr-devel
  libmpc-devel
  wget
  gcc
  libncurses-devel
  ioperm
  libusb-win32
  flex
  bison

Cygwin does not have a package with Verilator or Icarus Verilog. If you have not installed them manually,
you'll have to enable building them in the Makefile, see below.

=head2 Components built

This is what the project currently downloads, builds and tests. You can choose what steps are performed
by editing the F<< Makefile >> next to this README file, see the I<< ENABLE_xxx >> constants at the beginning.
By default, the framework builds only the most commonly-used components and does not perform any tests,
in order to generate a useful OpenRISC toolchain as fast as possible.

=over

=item * OpenCores' OpenRISC repositories

A collection of repositories often used together with OpenRISC designs,
they are mostly Subversion repositories from L<< http://OpenCores.org/ >> .

=item * OpenCores' OpenRISC Toolchain

This includes the I<< or1ksim >> simulator, Binutils, Newlib, GCC and GDB. 

At the moment only the bare-metal version (without Linux support) is built.

Most of those components are installed together in a combined I<< ToolchainOr32Bare >> subdirectory.

Optional steps are:

=over

=item * Some of the self-tests are also run after building their respective components.

=item * A full I<< diskcheck >> is performed for I<< or1ksim >>.

=item * The F<< bld-all.sh >> script, which automatically builds most of the components together, is also run separately.

BEWARE: The F<< bld-all.sh >> is broken at the moment, probably because it cannot cope with spaces in the PATH.

=back

=item * ORPSoC v2

Some basic linting is performed on the Verilog source code.
Several combinations of top-level modules (CPU core only, SoC, test bench)
and CPU core configurations (with minimal or maximal features enabled) are linted separately.

The PDF documentation is built out of the TeX sources.

An optional step is to run the I<< rtl-tests >>.

=item * OpenRISC Test Suite

I<< orbuild >> includes a port of most of the simple OpenRISC test cases written in assembly
in the or1ksim and ORPSoC V2 repositories. The test cases were forked in may 2012.
There are also a few new test cases, like those in file F<< asm-load.S >>.

The motivation behind this fork is to make it easy to run the test cases against
different OpenRISC implementations and/or simulations.
Currently, the test suite is run against the I<< or1ksim >> simulator and
against an Icarus Verilog simulation of ORPSoC V2.

The new test suite should actually live in a separate source repository,
but it is kept together with I<< orbuild >> for convenience, at least for the time being.

DejaGnu is not used any more to run the tests, there is a new perl script that matches
the test logs with the expected output. The script is not as tolerant
as the I<< expect >> tool, which has both advantages and disadvantages.
The overall implementation is now cleaner, so it should be easier now
to reroute all test results to a separate log file so that
they are not mixed together with other log messages.

Note that all test cases run now in parallel in order to take advantage of multiprocessor computers.
The resulting log files are integrated with I<< orbuild >>'s log system, so you can click through
from the main HTML report and inspect each individual test log separately.

Many of the tests are actually disabled at the moment, as they fail when run against the Verilog model.
They will get re-enabled later on when the I<< or1200 >> CPU core gets fixed.

Most of the test cases that deal with the different subsystems have not been ported yet,
so the following areas are not covered:
performance counters, MMU, caches, debug unit, power management, PIC and timer.

=item * Peter Gavin's OpenRISC toolchain

Taken from git head at git://github.com/pgavin

Both the "bare" toolchain with Newlib and the Linux toolchain (BEWARE: this is broken at the moment) with uClibc are built.

The Binutils test suite is also run for the "bare" toolchain.

GDB 7.2 from OpenCores.org gets built with the Linux toolchain.

An optional step is to run the Binutils checks.

=item * eCos realtime operating system

The eCos repository is downloaded from L<< http://OpenCores.org/ >>, eCos is configured and a simple
C++ test case is built. The resulting binary is run against the I<< or1ksim >> simulator and the output
is checked against the expected result.

=item * MinSoC

The MinSoC repository is downloaded. MinSoC's automatic installation script is run, which downloads
the same MinSoC repository again (among many other tools).

This step is optional. If you enable it, beware that the script blindly adds entries to your .bashrc file (as of may 2012).

=item * Icarus Verilog

Taken from git L<< git://github.com/steveicarus/iverilog.git >> , stable branch I<< v0_9-branch >> ,
so it may not be as stable as an officially-released version.

This step is optional. If not enabled, the currently installed Icarus Verilog will be used.

=item * Verilator

Taken from git head at L<< http://git.veripool.org/git/verilator >> , so it may not be as stable
as an officially-released version.

This step is optional. If not enabled, the currently installed Verilator will be used.

=back

=head1 License

Copyright (C) R. Diez 2011,  rdiezmail-openrisc at yahoo.de

The I<< orbuild >> source code is released under the GPL 3 license.

Please note that some of the files under this directory, especially in the OpenRISC test suite,
have other authors and licenses.

This document is released under the Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0) license.

=cut
