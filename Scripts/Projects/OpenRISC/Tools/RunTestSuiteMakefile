
# Copyright (C) 2012 R. Diez - see the orbuild project for licensing information.

.DELETE_ON_ERROR:

SHELL := bash  # This makefile has only been tested with bash.

include $(ORBUILD_SANDBOX)/Scripts/MakeModules/MakeUtils.mk
include $(ORBUILD_SANDBOX)/Scripts/MakeModules/RunAndReportTemplates.mk

.PHONY: all

TEST_TOOLS_DIR := $(ORBUILD_PROJECT_DIR)/Tools
TEST_SUITE_DIR := $(ORBUILD_PROJECT_DIR)/TestSuite

MAX_SIMULATION_TIME_IN_CLOCK_TICKS := 200000

# Set this variable to --trace in order to turn on or1ksim's tracing.
OR1KSIM_TRACE_SWITCH :=
# Set this variable to --trace-insn=on in order to turn on or1k-elf-run's tracing.
OR1KELFRUN_TRACE_SWITCH :=

ifeq "$(strip $(JUMP_DELAY_SLOT))" "with-jump-delay-slot"

  OR1KSIM_CFG_FILENAME := $(TEST_TOOLS_DIR)/or1ksim-with-jump-delay-slot.cfg

else ifeq "$(strip $(JUMP_DELAY_SLOT))" "without-jump-delay-slot"

  OR1KSIM_CFG_FILENAME := $(TEST_TOOLS_DIR)/or1ksim-without-jump-delay-slot.cfg

else

  OR1KSIM_CFG_FILENAME := <unknown jump delay slot $(JUMP_DELAY_SLOT) && exit 1

endif

REQUIRED_FILES_GROUP :=
SIMULATIONS_GROUP    :=


# $(ORTS_EXES_INSTALL_SENTINEL) is the top-level dependency for all ruls in this makefile.
# While not strictly necessary, it is very convenient during development of the test suite:
# if the calling makefile rebuilds the test cases, that dependency makes sure that all the tests
# are run again. Note that we wouldn't need to pass $(ORTS_EXES_INSTALL_SENTINEL) down if
# this weren't a separate makefile.


VERILOG_INCLUDE_DIR := $(OUTPUT_DIR)/verilog/include

IVERILOG_EXE_DIR := $(OUTPUT_DIR)/SimulatorIcarusVerilog
IVERILOG_EXE_FILENAME := $(IVERILOG_EXE_DIR)/OrtsSimulatorIcarusVerilog

ISIM_EXE_DIR := $(OUTPUT_DIR)/SimulatorISim
ISIM_EXE_FILENAME := $(ISIM_EXE_DIR)/OrtsSimulatorISim

VERILATOR_EXE_DIR := $(OUTPUT_DIR)/SimulatorVerilator
VERILATOR_EXE_FILENAME := $(VERILATOR_EXE_DIR)/OrtsSimulatorVerilator

OR1200_CONFIG_FILE  := $(VERILOG_INCLUDE_DIR)/or1200_defines.v
OR1200_TEST_DEFINES_FILENAME := $(VERILOG_INCLUDE_DIR)/test-defines.v


# ---- Generate a common test-defines.v file for all the ORPSoC RTL simulations.

ORPSOC_DEFINES_CMD := mkdir --parents \"$(VERILOG_INCLUDE_DIR)\" &&
ORPSOC_DEFINES_CMD += echo \"Generating $(OR1200_TEST_DEFINES_FILENAME) ...\" &&
ORPSOC_DEFINES_CMD += \"$(TEST_TOOLS_DIR)/GenerateTestDefinesFile.sh\" \"$(OR1200_TEST_DEFINES_FILENAME)\"

ORPSOC_DEFINES_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,ORPSOC_DEFINES,test bench defines,$(SHELL) -c "$(ORPSOC_DEFINES_CMD)"))

$(ORPSOC_DEFINES_SENTINEL): $(ORTS_EXES_INSTALL_SENTINEL)


# ---- Generate a common or1200_defines.v file for all the ORPSoC model simulations.

ORTS_ORPSOC_OR1200_CONFIG_CMD := mkdir --parents \"$(VERILOG_INCLUDE_DIR)\" &&
ORTS_ORPSOC_OR1200_CONFIG_CMD += echo \"Generating $(OR1200_CONFIG_FILE) ...\" &&
ORTS_ORPSOC_OR1200_CONFIG_CMD += \"$(TEST_TOOLS_DIR)/GenerateOr1200Config.pl\"
ORTS_ORPSOC_OR1200_CONFIG_CMD +=    \"$(ORPSOCV2_CHECKOUT_DIR)/rtl/verilog/include/or1200_defines.v\"
ORTS_ORPSOC_OR1200_CONFIG_CMD +=    \"$(OR1200_CONFIG_FILE)\"
ORTS_ORPSOC_OR1200_CONFIG_CMD +=    \"maximal-features\"

ORTS_ORPSOC_OR1200_CONFIG_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,ORTS_ORPSOC_OR1200_CONFIG,or1200 configuration,$(SHELL) -c "$(ORTS_ORPSOC_OR1200_CONFIG_CMD)"))

$(ORTS_ORPSOC_OR1200_CONFIG_SENTINEL): $(ORTS_EXES_INSTALL_SENTINEL)


# ---- Generate a common or1200_defines.v file for all the MinSoC model simulations.

ORTS_MINSOC_OR1200_CONFIG_CMD := mkdir --parents \"$(VERILOG_INCLUDE_DIR)\" &&
ORTS_MINSOC_OR1200_CONFIG_CMD += echo \"Generating $(OR1200_CONFIG_FILE) ...\" &&
ORTS_MINSOC_OR1200_CONFIG_CMD += \"$(TEST_TOOLS_DIR)/GenerateOr1200Config.pl\"
ORTS_MINSOC_OR1200_CONFIG_CMD +=    \"$(MINSOC_CHECKOUT_DIR)/rtl/verilog/or1200/rtl/verilog/or1200_defines.v\"
ORTS_MINSOC_OR1200_CONFIG_CMD +=    \"$(OR1200_CONFIG_FILE)\"
ORTS_MINSOC_OR1200_CONFIG_CMD +=    \"maximal-features\"

ORTS_MINSOC_OR1200_CONFIG_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,ORTS_MINSOC_OR1200_CONFIG,or1200 configuration,$(SHELL) -c "$(ORTS_MINSOC_OR1200_CONFIG_CMD)"))

$(ORTS_MINSOC_OR1200_CONFIG_SENTINEL): $(ORTS_EXES_INSTALL_SENTINEL)


# ---- Generate a common Icarus Verilog executable for all the ORPSoC RTL model simulations.

BUILD_ORPSOC_IVERILOG_SIM_CMD := if [ -d \"$(IVERILOG_EXE_DIR)\" ]; then echo \"Deleting previous Icarus Verilog simulator directory $(IVERILOG_EXE_DIR)...\" && rm -rf \"$(IVERILOG_EXE_DIR)\"; fi &&
BUILD_ORPSOC_IVERILOG_SIM_CMD += mkdir --parents \"$(IVERILOG_EXE_DIR)\" &&
BUILD_ORPSOC_IVERILOG_SIM_CMD += \"$(TEST_TOOLS_DIR)/SimulatorBuildScripts/BuildSim-ORPSoC-IcarusVerilog.sh\"
BUILD_ORPSOC_IVERILOG_SIM_CMD +=    \"$(ORPSOCV2_CHECKOUT_DIR)\"
BUILD_ORPSOC_IVERILOG_SIM_CMD +=    \"$(VERILOG_INCLUDE_DIR)\"
BUILD_ORPSOC_IVERILOG_SIM_CMD +=    \"$(IVERILOG_EXE_DIR)\"
BUILD_ORPSOC_IVERILOG_SIM_CMD +=    \"$(IVERILOG_EXE_FILENAME)\"

BUILD_ORPSOC_IVERILOG_SIM_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,BUILD_ORPSOC_IVERILOG_SIM,Icarus Verilog or1200 simulator,$(SHELL) -c "$(BUILD_ORPSOC_IVERILOG_SIM_CMD)"))

$(BUILD_ORPSOC_IVERILOG_SIM_SENTINEL): $(ORTS_ORPSOC_OR1200_CONFIG_SENTINEL) $(ORPSOC_DEFINES_SENTINEL)


# ---- Generate a common Icarus Verilog executable for all the MinSoC simulations.

BUILD_MINSOC_IVERILOG_SIM_CMD := if [ -d \"$(IVERILOG_EXE_DIR)\" ]; then echo \"Deleting previous Icarus Verilog simulator directory $(IVERILOG_EXE_DIR)...\" && rm -rf \"$(IVERILOG_EXE_DIR)\"; fi &&
BUILD_MINSOC_IVERILOG_SIM_CMD += mkdir --parents \"$(IVERILOG_EXE_DIR)\" &&
BUILD_MINSOC_IVERILOG_SIM_CMD += \"$(TEST_TOOLS_DIR)/SimulatorBuildScripts/BuildSim-MinSoC-IcarusVerilog.sh\"
BUILD_MINSOC_IVERILOG_SIM_CMD +=    \"$(MINSOC_CHECKOUT_DIR)\"
BUILD_MINSOC_IVERILOG_SIM_CMD +=    \"$(VERILOG_INCLUDE_DIR)\"
BUILD_MINSOC_IVERILOG_SIM_CMD +=    \"$(IVERILOG_EXE_DIR)\"
BUILD_MINSOC_IVERILOG_SIM_CMD +=    \"$(IVERILOG_EXE_FILENAME)\"

BUILD_MINSOC_IVERILOG_SIM_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,BUILD_MINSOC_IVERILOG_SIM,Icarus Verilog MinSoC simulator,$(SHELL) -c "$(BUILD_MINSOC_IVERILOG_SIM_CMD)"))

$(BUILD_MINSOC_IVERILOG_SIM_SENTINEL): $(ORTS_MINSOC_OR1200_CONFIG_SENTINEL)


# ---- Generate a common Icarus Verilog executable for all the or10 simulations.

BUILD_OR10_IVERILOG_SIM_CMD := if [ -d \"$(IVERILOG_EXE_DIR)\" ]; then echo \"Deleting previous Icarus Verilog simulator directory $(IVERILOG_EXE_DIR)...\" && rm -rf \"$(IVERILOG_EXE_DIR)\"; fi &&
BUILD_OR10_IVERILOG_SIM_CMD += mkdir --parents \"$(IVERILOG_EXE_DIR)\" &&
BUILD_OR10_IVERILOG_SIM_CMD += \"$(TEST_TOOLS_DIR)/SimulatorBuildScripts/BuildSim-OR10-IcarusVerilog.sh\"
BUILD_OR10_IVERILOG_SIM_CMD +=    \"$(VERILOG_INCLUDE_DIR)\"
BUILD_OR10_IVERILOG_SIM_CMD +=    \"$(IVERILOG_EXE_DIR)\"
BUILD_OR10_IVERILOG_SIM_CMD +=    \"$(IVERILOG_EXE_FILENAME)\"

BUILD_OR10_IVERILOG_SIM_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,BUILD_OR10_IVERILOG_SIM,Icarus Verilog OR10 simulator,$(SHELL) -c "$(BUILD_OR10_IVERILOG_SIM_CMD)"))

$(BUILD_OR10_IVERILOG_SIM_SENTINEL): $(ORTS_EXES_INSTALL_SENTINEL)


# ---- Generate a common Xilinx ISim executable for all the or10 simulations.

BUILD_OR10_ISIM_SIM_CMD := if [ -d \"$(ISIM_EXE_DIR)\" ]; then echo \"Deleting previous ISim simulator directory $(ISIM_EXE_DIR)...\" && rm -rf \"$(ISIM_EXE_DIR)\"; fi &&
BUILD_OR10_ISIM_SIM_CMD += mkdir --parents \"$(ISIM_EXE_DIR)\" &&
BUILD_OR10_ISIM_SIM_CMD += \"$(TEST_TOOLS_DIR)/SimulatorBuildScripts/BuildSim-OR10-ISim.sh\"
BUILD_OR10_ISIM_SIM_CMD +=    \"$(VERILOG_INCLUDE_DIR)\"
BUILD_OR10_ISIM_SIM_CMD +=    \"$(ISIM_EXE_DIR)\"
BUILD_OR10_ISIM_SIM_CMD +=    \"$(ISIM_EXE_FILENAME)\"

BUILD_OR10_ISIM_SIM_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,BUILD_OR10_ISIM_SIM,Icarus Verilog OR10 simulator,$(SHELL) -c "$(BUILD_OR10_ISIM_SIM_CMD)"))

$(BUILD_OR10_ISIM_SIM_SENTINEL): $(ORTS_EXES_INSTALL_SENTINEL)


# ---- Generate a common Verilator executable for all the or10 simulations.

BUILD_OR10_VERILATOR_SIM_CMD := if [ -d \"$(VERILATOR_EXE_DIR)\" ]; then echo \"Deleting previous Icarus Verilog simulator directory $(VERILATOR_EXE_DIR)...\" && rm -rf \"$(VERILATOR_EXE_DIR)\"; fi &&
BUILD_OR10_VERILATOR_SIM_CMD += mkdir --parents \"$(VERILATOR_EXE_DIR)\" &&
BUILD_OR10_VERILATOR_SIM_CMD += \"$(TEST_TOOLS_DIR)/SimulatorBuildScripts/BuildSim-OR10-Verilator.sh\"
BUILD_OR10_VERILATOR_SIM_CMD +=    \"$(VERILOG_INCLUDE_DIR)\"
BUILD_OR10_VERILATOR_SIM_CMD +=    \"$(VERILATOR_EXE_DIR)\"
BUILD_OR10_VERILATOR_SIM_CMD +=    \"$(VERILATOR_EXE_FILENAME)\"

BUILD_OR10_VERILATOR_SIM_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,BUILD_OR10_VERILATOR_SIM,Verilator OR10 simulator,$(SHELL) -c "$(BUILD_OR10_VERILATOR_SIM_CMD)"))

$(BUILD_OR10_VERILATOR_SIM_SENTINEL): $(ORTS_EXES_INSTALL_SENTINEL)


# -----------------------------------------------------
#
# Step 1)
# Before compiling and running the simulation, the simulation's file directory must be created.
# For Verilog or Verilator simulations, the .bin and .vmem or .hex files are also generated.
# Note that these files could actually be generated just once for all simulation types.
#

define simulation_files_template_variables_1

  $(1)_SIMULATION_FILES_DIR             := $(OUTPUT_DIR)/$(1)
  $(1)_SIMULATION_LOG_FILENAME          := $(OUTPUT_DIR)/$(1)/Simulation.log

endef

define simulation_files_template_variables_2

  $(eval $(call simulation_files_template_variables_1,$(1)))

  $(1)_SIMULATION_FILES_CMD := if [ -d \"$(value $(1)_SIMULATION_FILES_DIR)\" ]; then echo \"Deleting previous simulation files directory $(value $(1)_SIMULATION_FILES_DIR)...\" && rm -rf \"$(value $(1)_SIMULATION_FILES_DIR)\"; fi &&
  $(1)_SIMULATION_FILES_CMD += mkdir \"$(value $(1)_SIMULATION_FILES_DIR)\"


  ifeq "$(TEST_TYPE)" "ORTS_OR1KSIM"

    $(1)_SIMULATION_FILES_CMD += && echo \"No simulation files required by this kind of simulation.\"

  else ifeq "$(TEST_TYPE)" "ORTS_PGAVIN_CGEN"

    $(1)_SIMULATION_FILES_CMD += && echo \"No simulation files required by this kind of simulation.\"

  else ifeq "$(TEST_TYPE)" "ORTS_ORPSOC_IVERILOG"

      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .elf file to .bin file...\"
      $(1)_SIMULATION_FILES_CMD += && $(OPENRISC_BARE_TARGET)-objcopy  --output-target=binary  \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\"
      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .bin file to .vmem file...\"
      $(1)_SIMULATION_FILES_CMD += && \"$(ORPSOCV2_CHECKOUT_DIR)/sw/utils/bin2vmem\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\" >\"$(value $(1)_SIMULATION_FILES_DIR)/sram.vmem\"

  else ifeq "$(TEST_TYPE)" "ORTS_MINSOC_IVERILOG"

      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .elf file to .bin file...\"
      $(1)_SIMULATION_FILES_CMD += && $(OPENRISC_BARE_TARGET)-objcopy  --output-target=binary  \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\"
      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .bin file to .hex file...\"
      $(1)_SIMULATION_FILES_CMD += && \"$(MINSOC_CHECKOUT_DIR)/sw/utils/bin2hex\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\" 1 -size_word >\"$(value $(1)_SIMULATION_FILES_DIR)/$(2).hex\"

  else ifeq "$(TEST_TYPE)" "ORTS_OR10_IVERILOG"

      # This is the same as for ORTS_MINSOC_IVERILOG.

      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .elf file to .bin file...\"
      $(1)_SIMULATION_FILES_CMD += && $(OPENRISC_BARE_TARGET)-objcopy  --output-target=binary  \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\"
      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .bin file to .hex file...\"
      $(1)_SIMULATION_FILES_CMD += && \"$(MINSOC_CHECKOUT_DIR)/sw/utils/bin2hex\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\" 1 -size_word >\"$(value $(1)_SIMULATION_FILES_DIR)/$(2).hex\"

  else ifeq "$(TEST_TYPE)" "ORTS_OR10_ISIM"

      # This is the same as for ORTS_MINSOC_IVERILOG.

      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .elf file to .bin file...\"
      $(1)_SIMULATION_FILES_CMD += && $(OPENRISC_BARE_TARGET)-objcopy  --output-target=binary  \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\"
      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .bin file to .hex file...\"
      $(1)_SIMULATION_FILES_CMD += && \"$(MINSOC_CHECKOUT_DIR)/sw/utils/bin2hex\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\" 1 -size_word >\"$(value $(1)_SIMULATION_FILES_DIR)/$(2).hex\"

  else ifeq "$(TEST_TYPE)" "ORTS_OR10_VERILATOR"

      # This is the same as for ORTS_MINSOC_IVERILOG.

      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .elf file to .bin file...\"
      $(1)_SIMULATION_FILES_CMD += && $(OPENRISC_BARE_TARGET)-objcopy  --output-target=binary  \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\"
      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .bin file to .hex file...\"
      $(1)_SIMULATION_FILES_CMD += && \"$(MINSOC_CHECKOUT_DIR)/sw/utils/bin2hex\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\" 1 -size_word >\"$(value $(1)_SIMULATION_FILES_DIR)/$(2).hex\"

  else

      $(1)_SIMULATION_FILES_CMD += && echo \"Unknown test type $(TEST_TYPE)\" && exit 1

  endif

  $(1)_SIMULATION_FILES_CMD += && echo \"Done.\"

endef

define simulation_files_template

  $(eval $(call simulation_files_template_variables_2,$(1),$(2)))

  $(eval $(call run_and_report_template,$(1)_SIMULATION_FILES,$2 required files,$(SHELL) -c "$(value $(1)_SIMULATION_FILES_CMD)"))

  REQUIRED_FILES_GROUP += $(1)_SIMULATION_FILES

endef


# -----------------------------------------------------
#
# Step 2)
# This component runs the actual simulation. Note that it depends on the simulation files (see above).
#

define test_case_simulation_template_variables

  $(1)_SIMULATION_RUN_CMD := set -o pipefail

  $(1)_SIMULATION_RUN_CMD += &&

  ifeq "$(TEST_TYPE)" "ORTS_OR1KSIM"

    $(1)_SIMULATION_RUN_CMD += \"$(OPENRISC_BARE_TARGET)-sim\" $(OR1KSIM_TRACE_SWITCH) --nosrv -f \"$(OR1KSIM_CFG_FILENAME)\" \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\"
    $(1)_SIMULATION_RUN_CMD +=   2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME)

  else ifeq "$(TEST_TYPE)" "ORTS_PGAVIN_CGEN"

    $(1)_SIMULATION_RUN_CMD += \"or1k-elf-run\" $(OR1KELFRUN_TRACE_SWITCH) \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\"
    $(1)_SIMULATION_RUN_CMD +=   2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME)

  else ifeq "$(TEST_TYPE)" "ORTS_ORPSOC_IVERILOG"

    $(1)_SIMULATION_RUN_CMD += pushd \"$(value $(1)_SIMULATION_FILES_DIR)\" >/dev/null &&
    $(1)_SIMULATION_RUN_CMD += vvp \"$(IVERILOG_EXE_FILENAME)\"
    $(1)_SIMULATION_RUN_CMD +=   2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME) &&
    $(1)_SIMULATION_RUN_CMD += popd >/dev/null

  else ifeq "$(TEST_TYPE)" "ORTS_MINSOC_IVERILOG"

    $(1)_SIMULATION_RUN_CMD += \"$(TEST_TOOLS_DIR)/SimulatorRunScripts/RunSim-IcarusVerilog.sh\" \"$(IVERILOG_EXE_FILENAME)\" \"$(value $(1)_SIMULATION_FILES_DIR)\" \"$(2)\" $(MAX_SIMULATION_TIME_IN_CLOCK_TICKS)
    $(1)_SIMULATION_RUN_CMD +=   2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME)

  else ifeq "$(TEST_TYPE)" "ORTS_OR10_IVERILOG"

    $(1)_SIMULATION_RUN_CMD += \"$(TEST_TOOLS_DIR)/SimulatorRunScripts/RunSim-IcarusVerilog.sh\" \"$(IVERILOG_EXE_FILENAME)\" \"$(value $(1)_SIMULATION_FILES_DIR)\" \"$(2)\" $(MAX_SIMULATION_TIME_IN_CLOCK_TICKS)
    $(1)_SIMULATION_RUN_CMD +=   2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME)

  else ifeq "$(TEST_TYPE)" "ORTS_OR10_ISIM"

    $(1)_SIMULATION_RUN_CMD += \"$(TEST_TOOLS_DIR)/SimulatorRunScripts/RunSim-ISim.sh\" \"$(ISIM_EXE_DIR)\" \"$(ISIM_EXE_FILENAME)\" \"$(value $(1)_SIMULATION_FILES_DIR)\" \"$(2)\" $(MAX_SIMULATION_TIME_IN_CLOCK_TICKS)
    $(1)_SIMULATION_RUN_CMD +=   2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME)

  else ifeq "$(TEST_TYPE)" "ORTS_OR10_VERILATOR"

    $(1)_SIMULATION_RUN_CMD += \"$(TEST_TOOLS_DIR)/SimulatorRunScripts/RunSim-Verilator.sh\" \"$(VERILATOR_EXE_FILENAME)\" \"$(value $(1)_SIMULATION_FILES_DIR)\" \"$(2)\" $(MAX_SIMULATION_TIME_IN_CLOCK_TICKS)
    $(1)_SIMULATION_RUN_CMD +=   2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME)

  else

    $(1)_SIMULATION_RUN_CMD += echo \"Unknown test type $(TEST_TYPE)\" && exit 1

  endif

  $(1)_SIMULATION_RUN_CMD += && \"$(TEST_TOOLS_DIR)/AnalyseLog.pl\" \"$(value $(1)_SIMULATION_LOG_FILENAME)\"

  ifeq "$(3)" "own-test-results"
    $(1)_SIMULATION_RUN_CMD += \"$(ORTS_EXES_BIN_DIR)/share/$(2).TestResults\"
  else ifeq "$(3)" "single-exit-0-test-results"
    $(1)_SIMULATION_RUN_CMD += \"$(ORTS_EXES_BIN_DIR)/share/single-exit-0.TestResults\"
  else
    $(1)_SIMULATION_RUN_CMD += && echo \"Unknown test result type $(3)\" && exit 1
  endif

  $(1)_SIMULATION_RUN_MAKEFLAGS_FILTER := clear

endef

define test_case_simulation_template

  $(eval $(call simulation_files_template,$(1),$(2)))

  $(eval $(call test_case_simulation_template_variables,$(1),$(2),$(3)))

  $(eval $(call run_and_report_template,$(1)_SIMULATION_RUN,$(2) simulation,$(SHELL) -c "$(value $(1)_SIMULATION_RUN_CMD)"))

  all: $(value $(1)_SIMULATION_RUN_SENTINEL)
  $(value $(1)_SIMULATION_RUN_SENTINEL): $(value $(1)_SIMULATION_FILES_SENTINEL)

  ifeq "$(TEST_TYPE)" "ORTS_OR1KSIM"
  else ifeq "$(TEST_TYPE)" "ORTS_PGAVIN_CGEN"
  else ifeq "$(TEST_TYPE)" "ORTS_ORPSOC_IVERILOG"
    $(value $(1)_SIMULATION_FILES_SENTINEL): $(BUILD_ORPSOC_IVERILOG_SIM_SENTINEL)
  else ifeq "$(TEST_TYPE)" "ORTS_MINSOC_IVERILOG"
    $(value $(1)_SIMULATION_FILES_SENTINEL): $(BUILD_MINSOC_IVERILOG_SIM_SENTINEL)
  else ifeq "$(TEST_TYPE)" "ORTS_OR10_VERILATOR"
    $(value $(1)_SIMULATION_FILES_SENTINEL): $(BUILD_OR10_VERILATOR_SIM_SENTINEL)
  else ifeq "$(TEST_TYPE)" "ORTS_OR10_IVERILOG"
    $(value $(1)_SIMULATION_FILES_SENTINEL): $(BUILD_OR10_IVERILOG_SIM_SENTINEL)
  else ifeq "$(TEST_TYPE)" "ORTS_OR10_ISIM"
    $(value $(1)_SIMULATION_FILES_SENTINEL): $(BUILD_OR10_ISIM_SIM_SENTINEL)
  else
    $(value $(1)_SIMULATION_FILES_SENTINEL): error_unknown_test_type
  endif

  $(value $(1)_SIMULATION_FILES_SENTINEL) : $(ORTS_EXES_INSTALL_SENTINEL)

  SIMULATION_GROUP += $(1)_SIMULATION_RUN

endef


# -----------------------------------------------------
#
# The test cases.
#

$(eval $(call test_case_simulation_template,ASM_BASIC,asm-basic,own-test-results))
$(eval $(call test_case_simulation_template,ASM_LOAD,asm-load,own-test-results))
$(eval $(call test_case_simulation_template,ASM_EXT,asm-ext,own-test-results))
$(eval $(call test_case_simulation_template,ASM_ADD,asm-add,own-test-results))
$(eval $(call test_case_simulation_template,ASM_AND,asm-and,own-test-results))
$(eval $(call test_case_simulation_template,ASM_OR,asm-or,own-test-results))
$(eval $(call test_case_simulation_template,ASM_SUB,asm-sub,own-test-results))
$(eval $(call test_case_simulation_template,ASM_XOR,asm-xor,own-test-results))
$(eval $(call test_case_simulation_template,ASM_MFSPR_WITHOUT_MAC_SUPPORT,asm-mfspr-without-mac-support,own-test-results))
$(eval $(call test_case_simulation_template,ASM_ROR,asm-ror,own-test-results))
$(eval $(call test_case_simulation_template,ASM_SHIFT,asm-shift,own-test-results))
$(eval $(call test_case_simulation_template,ASM_FIND,asm-find,own-test-results))
$(eval $(call test_case_simulation_template,ASM_JUMP,asm-jump,own-test-results))
$(eval $(call test_case_simulation_template,ASM_EXCEPTIONS,asm-exceptions,own-test-results))
$(eval $(call test_case_simulation_template,ASM_TICK_TIMER,asm-tick-timer,own-test-results))
$(eval $(call test_case_simulation_template,ASM_FLAG,asm-flag,own-test-results))

ifeq "$(strip $(MUL_INSTRUCTIONS))" "with-mul-instructions"
  $(eval $(call test_case_simulation_template,ASM_MFSPR_WITH_MAC_SUPPORT,asm-mfspr-with-mac-support,own-test-results))
  $(eval $(call test_case_simulation_template,ASM_MUL,asm-mul,own-test-results))
  $(eval $(call test_case_simulation_template,ASM_DIV,asm-div,own-test-results))
  $(eval $(call test_case_simulation_template,ASM_MAC,asm-mac,own-test-results))
else ifeq "$(strip $(MUL_INSTRUCTIONS))" "without-mul-instructions"
  # No extra tests to do here.
else
  $(call assertion_failure,Variable MUL_INSTRUCTIONS has an invalid value of "$(MUL_INSTRUCTIONS)")
endif


ifeq "$(strip $(JUMP_DELAY_SLOT))" "with-jump-delay-slot"
  $(eval $(call test_case_simulation_template,ASM_BASIC_WITH_JUMP_DELAY_SLOT,asm-basic-with-jump-delay-slot,own-test-results))
else
  $(eval $(call test_case_simulation_template,ASM_BASIC_WITHOUT_JUMP_DELAY_SLOT,asm-basic-without-jump-delay-slot,own-test-results))
endif

$(eval $(call test_case_simulation_template,C_BASIC,c-basic,single-exit-0-test-results))
$(eval $(call test_case_simulation_template,C_BASIC_NEWLIB,c-basic-newlib,single-exit-0-test-results))
$(eval $(call test_case_simulation_template,CPP_BASIC_NEWLIB,cpp-basic-newlib,single-exit-0-test-results))

generate_groups_file:
	echo "Required Files = $(REQUIRED_FILES_GROUP)" >>$(ORBUILD_COMPONENT_GROUPS_FILENAME)
	echo "Simulations = $(SIMULATION_GROUP)" >>$(ORBUILD_COMPONENT_GROUPS_FILENAME)

all: generate_groups_file
