
# Copyright (C) 2012 R. Diez - see the orbuild project for licensing information.

.DELETE_ON_ERROR:

SHELL := bash  # This makefile has only been tested with bash.

include $(ORBUILD_SANDBOX)/Scripts/MakeModules/MakeUtils.mk
include $(ORBUILD_SANDBOX)/Scripts/MakeModules/RunAndReportTemplates.mk

.PHONY: all

TEST_TOOLS_DIR := $(ORBUILD_PROJECT_DIR)/Tools
TEST_SUITE_DIR := $(ORBUILD_PROJECT_DIR)/TestSuite

# Set this variable to --trace in order to turn on or1ksim's tracing.
OR1KSIM_TRACE_SWITCH :=

REQUIRED_FILES_GROUP :=
SIMULATIONS_GROUP    :=

# ---- Generate a common or1200_config.v file for all the or1200 RTL model simulations.

VERILOG_INCLUDE_DIR := $(OUTPUT_DIR)/verilog/include
OR1200_CONFIG_FILE  := $(VERILOG_INCLUDE_DIR)/or1200_defines.v


ORTS_OR1200_CONFIG_CMD := if [ -d \"$(VERILOG_INCLUDE_DIR)\" ]; then echo \"Deleting previous verilog include directory $(VERILOG_INCLUDE_DIR)...\" && rm -rf \"$(VERILOG_INCLUDE_DIR)\"; fi &&
ORTS_OR1200_CONFIG_CMD += mkdir --parents \"$(VERILOG_INCLUDE_DIR)\" &&
ORTS_OR1200_CONFIG_CMD += \"$(TEST_TOOLS_DIR)/GenerateOr1200Config.pl\"
ORTS_OR1200_CONFIG_CMD +=    \"$(ORPSOCV2_CHECKOUT_DIR)/rtl/verilog/include/or1200_defines.v\"
ORTS_OR1200_CONFIG_CMD +=    \"$(OR1200_CONFIG_FILE)\"
ORTS_OR1200_CONFIG_CMD +=    \"maximal-features\"

ORTS_OR1200_CONFIG_MAKEFLAGS_FILTER := clear

$(eval $(call run_and_report_template,ORTS_OR1200_CONFIG,or1200 configuration,$(SHELL) -c "$(ORTS_OR1200_CONFIG_CMD)"))

$(OR1200_CONFIG_FILE): $(ORTS_OR1200_CONFIG_SENTINEL)


# -----------------------------------------------------
#
# Step 1)
# Before compiling and running the simulation, the simulation's file directory must be created.
# For Verilog simulations, the .bin and .vmem files are also generated.
#

define simulation_files_template_variables_1

  $(1)_SIMULATION_FILES_DIR             := $(OUTPUT_DIR)/$(1)
  $(1)_SIMULATION_LOG_FILENAME          := $(OUTPUT_DIR)/$(1)/Simulation.log
  $(1)_SIMULATION_TEST_DEFINES_FILENAME := $(OUTPUT_DIR)/$(1)/test-defines.v

endef

define simulation_files_template_variables_2

  $(eval $(call simulation_files_template_variables_1,$(1)))

  $(1)_SIMULATION_FILES_CMD := if [ -d \"$(value $(1)_SIMULATION_FILES_DIR)\" ]; then echo \"Deleting previous simulation files directory $(value $(1)_SIMULATION_FILES_DIR)...\" && rm -rf \"$(value $(1)_SIMULATION_FILES_DIR)\"; fi &&
  $(1)_SIMULATION_FILES_CMD += mkdir \"$(value $(1)_SIMULATION_FILES_DIR)\"


  ifeq "$(TEST_TYPE)" "ORTS_ORK1SIM"

  else ifeq "$(TEST_TYPE)" "ORTS_PGAVIN_CGEN"

  else ifeq "$(TEST_TYPE)" "ORTS_ORPSOC_IVERILOG"

      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .elf file to .bin file...\"
      $(1)_SIMULATION_FILES_CMD += && $(OPENRISC_BARE_TARGET)-objcopy  --output-target=binary  \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\"
      $(1)_SIMULATION_FILES_CMD += && echo \"Converting .bin file to .vmem file...\"
      $(1)_SIMULATION_FILES_CMD += && \"$(ORPSOCV2_CHECKOUT_DIR)/sw/utils/bin2vmem\" \"$(value $(1)_SIMULATION_FILES_DIR)/$(2).bin\" >\"$(value $(1)_SIMULATION_FILES_DIR)/sram.vmem\"
      $(1)_SIMULATION_FILES_CMD += && echo \"Generating $(value $(1)_SIMULATION_TEST_DEFINES_FILENAME) ...\"
      $(1)_SIMULATION_FILES_CMD += && \"$(TEST_TOOLS_DIR)/GenerateTestDefinesFile.sh\" \"$(value $(1)_SIMULATION_TEST_DEFINES_FILENAME)\"

  else

      $(1)_SIMULATION_FILES_CMD += && echo \"Unknown test type $(TEST_TYPE)\" && exit 1

  endif

  $(1)_SIMULATION_FILES_CMD += && echo \"Done.\"

endef

define simulation_files_template

  $(eval $(call simulation_files_template_variables_2,$(1),$(2)))

  $(eval $(call run_and_report_template,$(1)_SIMULATION_FILES,$2 required files,$(SHELL) -c "$(value $(1)_SIMULATION_FILES_CMD)"))

  REQUIRED_FILES_GROUP += $(1)_SIMULATION_FILES

endef


# -----------------------------------------------------
#
# Step 2)
# This component runs the actual simulation. Note that it depends on the simulation files (see above).
#

define test_case_simulation_template_variables

  $(1)_SIMULATION_RUN_CMD := set -o pipefail

  $(1)_SIMULATION_RUN_CMD += &&

  ifeq "$(TEST_TYPE)" "ORTS_ORK1SIM"

    $(1)_SIMULATION_RUN_CMD += \"$(OPENRISC_BARE_TARGET)-sim\" $(OR1KSIM_TRACE_SWITCH) --nosrv -f \"$(TEST_TOOLS_DIR)/or1ksim.cfg\" \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\"

  else ifeq "$(TEST_TYPE)" "ORTS_PGAVIN_CGEN"

    $(1)_SIMULATION_RUN_CMD += \"or1k-elf-run\" $(OR1KSIM_TRACE_SWITCH) \"$(ORTS_EXES_BIN_DIR)/bin/$(2)\"

  else ifeq "$(TEST_TYPE)" "ORTS_ORPSOC_IVERILOG"

    $(1)_SIMULATION_RUN_CMD += \"$(TEST_TOOLS_DIR)/SimulateWithIcarusVerilog.sh\" \"$(ORPSOCV2_CHECKOUT_DIR)\" \"$(ORTS_EXES_BIN_DIR)/bin\" \"$(VERILOG_INCLUDE_DIR)\" \"$(value $(1)_SIMULATION_FILES_DIR)\" \"$(2)\"

  else

    $(1)_SIMULATION_RUN_CMD += echo \"Unknown test type $(TEST_TYPE)\" && exit 1

  endif

  $(1)_SIMULATION_RUN_CMD += 2>&1 | tee $(value $(1)_SIMULATION_LOG_FILENAME)

  $(1)_SIMULATION_RUN_CMD += && \"$(TEST_TOOLS_DIR)/AnalyseLog.pl\" \"$(value $(1)_SIMULATION_LOG_FILENAME)\" \"$(ORTS_EXES_BIN_DIR)/share/$(2).TestResults\"

  $(1)_SIMULATION_RUN_MAKEFLAGS_FILTER := clear

endef

define test_case_simulation_template

  $(eval $(call simulation_files_template,$(1),$(2)))

  $(eval $(call test_case_simulation_template_variables,$(1),$(2)))

  $(eval $(call run_and_report_template,$(1)_SIMULATION_RUN,$(2) simulation,$(SHELL) -c "$(value $(1)_SIMULATION_RUN_CMD)"))

  all: $(value $(1)_SIMULATION_RUN_SENTINEL)
  $(value $(1)_SIMULATION_RUN_SENTINEL): $(value $(1)_SIMULATION_FILES_SENTINEL)


  ifeq "$(TEST_TYPE)" "ORTS_ORK1SIM"
  else ifeq "$(TEST_TYPE)" "ORTS_PGAVIN_CGEN"
  else ifeq "$(TEST_TYPE)" "ORTS_ORPSOC_IVERILOG"
    $(value $(1)_SIMULATION_FILES_SENTINEL): $(OR1200_CONFIG_FILE)
  else
    $(value $(1)_SIMULATION_FILES_SENTINEL): error_unknown_test_type
  endif

  SIMULATION_GROUP += $(1)_SIMULATION_RUN

endef


# -----------------------------------------------------
#
# The test cases.
#

$(eval $(call test_case_simulation_template,ASM_BASIC,asm-basic))
$(eval $(call test_case_simulation_template,ASM_LOAD,asm-load))
$(eval $(call test_case_simulation_template,ASM_EXT,asm-ext))
$(eval $(call test_case_simulation_template,ASM_ADD,asm-add))
$(eval $(call test_case_simulation_template,ASM_AND,asm-and))
$(eval $(call test_case_simulation_template,ASM_OR,asm-or))
$(eval $(call test_case_simulation_template,ASM_SUB,asm-sub))
$(eval $(call test_case_simulation_template,ASM_XOR,asm-xor))
$(eval $(call test_case_simulation_template,ASM_MFSPR,asm-mfspr))
$(eval $(call test_case_simulation_template,ASM_ROR,asm-ror))
$(eval $(call test_case_simulation_template,ASM_SHIFT,asm-shift))
$(eval $(call test_case_simulation_template,ASM_MUL,asm-mul))
$(eval $(call test_case_simulation_template,ASM_DIV,asm-div))
$(eval $(call test_case_simulation_template,ASM_FIND,asm-find))
$(eval $(call test_case_simulation_template,ASM_JUMP,asm-jump))
$(eval $(call test_case_simulation_template,ASM_FLAG,asm-flag))
$(eval $(call test_case_simulation_template,ASM_MAC,asm-mac))


generate_groups_file:
	echo "Required Files = $(REQUIRED_FILES_GROUP)" >>$(ORBUILD_COMPONENT_GROUPS_FILENAME)
	echo "Simulations = $(SIMULATION_GROUP)" >>$(ORBUILD_COMPONENT_GROUPS_FILENAME)

all: generate_groups_file
