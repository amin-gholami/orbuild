
# Configuration file for the orbuild system.

RotateSlotCount  = 2

# The orbuild framework is generic enough to be repurposed for projects other than OpenRISC.
# With this setting you can specify your own project makefile.
#
# Note that the project's top-level path is deduced from this filename,
# so the makefile specified here should live at the top of the project's directory structure.
#
# You probably want to edit the project's makefile in order to choose which components get built.
# In the case of OpenRISC, look at the ENABLE_xxx variables at the top.
#
# Makefile       = Scripts/Projects/ExampleSimple/Makefile
# Makefile       = Scripts/Projects/ExampleGroups/Makefile
Makefile         = Scripts/Projects/OpenRISC/Makefile

# Building in parallel can dramatically reduce the build time. However,
# if your build process requires human interaction (for example, when Subversion prompts for a login and password),
# then you should disable the parallel build, otherwise the output will be interleaved
# and you may not see the interactive prompts clearly.
# This setting can be overridden with command-line switch --interactive .
ParallelBuild    = yes

# Set the build process priority, see your system's documentation for the 'nice' tool.
# A value of 15 is recommended (which is a fairly low priorty), in order to prevent
# rendering the computer unresponsive for long periods of time.
# Note that 15 = 5 * 3, which means that, under Linux, the default ionice priority
# is automatically reduced by 3 notches, which should also help reduce the hard disk
# performace impact on other applications.
# This setting is optional. If not present (or empty), the process priority is not changed.
ProcessPriority = 15

# Limit the amount of virtual memory a child process can use, which can prevent
# excessive thrashing if a process goes awry. Note that child process may then
# fail with out-of-memory error messages.
#   1 GB = 1073741824 bytes
#   2 GB = 2147483648 bytes
# This setting is optional. If not present (or empty), no limit is set.
# Note that perl module BSD::Resource is required, which is currently not available on Cygwin.
#   MaximumVirtualMemoryPerProcess = 2147483648

# Set to 'yes' if your build requires interaction (for example, when Subversion prompts for a login and password).
# This setting is incompatible with ParallelBuild, not because it's strictly illegal, but
# because it does not normally make sense. See ParallelBuild for more information.
# This setting can be overridden with command-line switch --interactive .
InteractiveBuild = no

# You normally want to build as many components as possible, instead of stopping on the first error.
StopOnFirstError = no

# The PostBuildAction runs only when the build is successful.
PostBuildAction =

# The VisualNotification action runs when the build finishes, whether successful or not.
# Use option --test-visual-notification in order to test this setting without building anything.
#
# Example 1, notify with gxmessage under Linux, wait for the user to close the notification window.
#   gxmessage has the shortcoming that closing the window without pressing a button
#   generates the same exit code as any other error. The "; true" here
#   ignores any non-zero exit code.
#
#     VisualNotification = gxmessage -title "Build finished" "Build finished"; true
#
# Example 2, open the generated HTML report with Firefox under Linux, but do not wait for the user to close it (leave it running in the background):
#   The "</dev/null" suffix prevents file "nohup.out" from being created every time.
#
#     VisualNotification = nohup firefox -new-window "$ORBUILD_FINAL_REPORT_FILENAME" 2>/dev/null >/dev/null
#
# Example 3, open the generated HTML report with Firefox under Windows:
#
#     VisualNotification = cygstart "$ORBUILD_FINAL_REPORT_FILENAME"
#
# Example 4, leave this setting empty to disable the visual notification, suitable when running on a server:
#
#     VisualNotification = 
#
# Example 5 (the default). orbuild comes with a script which tries to guess the best way to open the HTML report.
#
#     VisualNotification = "$ORBUILD_TOOLS/VisualNotification.sh" "$ORBUILD_FINAL_REPORT_FILENAME"
#
VisualNotification = "$ORBUILD_TOOLS/VisualNotification.sh" "$ORBUILD_FINAL_REPORT_FILENAME"

DownloadCacheDir = DownloadCache/
RepositoriesDir  = Repositories/
BuildsDir        = Builds/
